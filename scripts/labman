#!/usr/bin/env python

# ----------------------------------------------------------------------------
# Copyright (c) 2017-, labman development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file LICENSE, distributed with this software.
# ----------------------------------------------------------------------------

import click


@click.group()
def labman():
    pass


@labman.command()
@click.option('--port', required=False, type=int,
              help="Port where the webserver will start", default=8080)
def start_webserver(port):
    """Starts the labman webserver"""
    import socket
    import errno

    from tornado.httpserver import HTTPServer
    from tornado.ioloop import IOLoop

    from labman.gui.webserver import Application

    http_server = HTTPServer(Application())
    try:
        http_server.listen(port)
    except socket.error as e:
        if e.errno == errno.EADDRINUSE:
            raise RuntimeError(
                "Port %d is already in use. Please choose another "
                "port with --port" % port)
        else:
            raise

    click.echo("Labman started on port %d" % port)
    ioloop = IOLoop.instance()

    ioloop.start()


@labman.command()
def config():
    """Generate labman configuration file"""
    from os.path import expanduser

    from labman.db.configuration_manager import ConfigurationManager

    config_fp = expanduser(click.prompt('Path to the configuration file',
                                        default='~/.labman.cfg'))

    click.echo('Postgres configuration:')
    db_host = click.prompt('Postgres host', default='localhost')
    db_port = click.prompt('Postgres port', default=5432)
    db_name = click.prompt('Database name', default='labman')
    db_user = click.prompt('Postgres user', default='labman')
    db_password = click.prompt('Postgres user password', hide_input=True,
                               confirmation_prompt=True, default="")
    db_admin_user = click.prompt('Postgres admin user', default='labman')
    db_admin_password = click.prompt(
        'Postgres admin user password', hide_input=True,
        confirmation_prompt=True, default="")

    ConfigurationManager.create(config_fp, db_host, db_port, db_name, db_user,
                                db_password, db_admin_user, db_admin_password)

if __name__ == '__main__':
    labman()
